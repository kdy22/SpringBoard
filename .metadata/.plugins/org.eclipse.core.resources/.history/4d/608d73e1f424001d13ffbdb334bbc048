package org.zerock.controller;

import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;
import org.zerock.domain.BoardAttachVO;
import org.zerock.domain.BoardVO;
import org.zerock.domain.Criteria;
import org.zerock.domain.PageDTO;
import org.zerock.service.BoardService;

import lombok.AllArgsConstructor;
import lombok.extern.log4j.Log4j;

@Controller
@Log4j
@RequestMapping("/board/*")
@AllArgsConstructor
public class BoardController {
	
	private BoardService service;
	
	@RequestMapping(value="/list" , method = {RequestMethod.GET, RequestMethod.POST})
	public void list(Criteria cri, Model model) {
		
		log.info("list" + cri);
		model.addAttribute("list" , service.getList(cri));
		
		int total = service.getTotal(cri);

		log.info("total: " + total);

		model.addAttribute("pageMaker", new PageDTO(cri, total));
		
	}
	
	@PostMapping("/register")
	public String register(BoardVO board, RedirectAttributes rttr) {
		
		log.info("==========================");

		log.info("register: " + board);

		if (board.getAttachList() != null) {

			board.getAttachList().forEach(attach -> log.info(attach));

		}

		log.info("==========================");

		service.register(board);

		rttr.addFlashAttribute("result", board.getBno());

		return "redirect:/board/list";
	}
	
	@GetMapping("/register")
	public void register() {
		
	}
	
	@GetMapping({"/get", "/modify"})
	public void get(@RequestParam("bno") Long bno, @ModelAttribute("cri")Criteria cri, Model model) {
		
		log.info("/get or modify");
		model.addAttribute("board", service.get(bno));
	}
	
	@PostMapping("/modify")
	public String modify(BoardVO board, @ModelAttribute("cri")Criteria cri, RedirectAttributes rttr) {
		log.info("modify:" + board);
		
		if (service.modify(board)) {
			rttr.addFlashAttribute("result", "success");
		}
		
		rttr.addAttribute("pageNum", cri.getPageNum());
		rttr.addAttribute("amount",cri.getAmount());
		rttr.addAttribute("type", cri.getType());
		rttr.addAttribute("keyword", cri.getKeyword());
		
		return "redirect:/board/list";
	}
	
	@PostMapping("/remove")
	public String remove(@RequestParam("bno") Long bno, @ModelAttribute("cri")Criteria cri, RedirectAttributes rttr) {
		
		log.info("remove..." + bno);
		
		List<BoardAttachVO> attachList = service.getAttachList(bno);
		
		if(service.remove(bno)) {
			
			deleteFiles(attachList);
			
			rttr.addFlashAttribute("result", "success");
		}
		
		rttr.addAttribute("pageNum", cri.getPageNum());
		rttr.addAttribute("amount",cri.getAmount());
		rttr.addAttribute("type", cri.getType());
		rttr.addAttribute("keyword", cri.getKeyword());
		return "redirect:/board/list" + cri.getListLink();
	}
	
	@GetMapping(value = "/getAttachList", produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
	@ResponseBody
	public ResponseEntity<List<BoardAttachVO>> getAttachList(Long bno) {

	log.info("getAttachList " + bno);

	return new ResponseEntity<>(service.getAttachList(bno), HttpStatus.OK);

	}
	
	private void deleteFiles(List<BoardAttachVO> attachList) {
	    
	    if(attachList == null || attachList.size() == 0) {
	      return;
	    }
	    
	    log.info("delete attach files...................");
	    log.info(attachList);
	    
	    attachList.forEach(attach -> {
	      try {        
	        Path file  = Paths.get("C:\\upload\\"+attach.getUploadPath()+"\\" + attach.getUuid()+"_"+ attach.getFileName());
	        
	        Files.deleteIfExists(file);
	        
	        if(Files.probeContentType(file).startsWith("image")) {
	        
	          Path thumbNail = Paths.get("C:\\upload\\"+attach.getUploadPath()+"\\s_" + attach.getUuid()+"_"+ attach.getFileName());
	          
	          Files.delete(thumbNail);
	        }
	
	      }catch(Exception e) {
	        log.error("delete file error" + e.getMessage());
	      }//end catch
	    });//end foreachd
	  }
	
	
	
	  @RequestMapping(value ="/adms/reserve/applicant/list.do")
	  public String listApplicant(HttpServletRequest request, ModelMap model) throws Exception {
	 
	    return "redirect:/board/list";
	}
	  
	  
	  @RequestMapping(value = "/adms/reserve/applicant/create_action.do", method = RequestMethod.POST)
	  public String createApplicant_action(
	          @ModelAttribute("searchVO") tbl_reserveVO searchVO,
	          RedirectAttributes redirectAttributes,
	          HttpServletRequest request,
	          final MultipartHttpServletRequest multiRequest,
	          ModelMap model) throws Exception {
	   
	  LoginVO loginVO = loginService.getLoginInfo();
	   
	   
	  Map<String, Object> resMap = new HashMap<String, Object>();
	   
	  try{
	      
	      ExcelRequestManager em = new ExcelRequestManager();
	      final Map<String, MultipartFile> files = multiRequest.getFileMap();
	      List<HashMap<String,String>> apply =null;
	      
	      apply = em.parseExcelSpringMultiPart(files,"applicant", 0, "", "reserve");
	        
	      for(int i = 0; i < apply.size(); i++){
	       
	         searchVO.setResv_program_type(apply.get(i).get("cell_0"));
	         searchVO.setResv_program(apply.get(i).get("cell_1"));
	          searchVO.setResv_biz_name(apply.get(i).get("cell_2"));
	          searchVO.setResv_biz_owner(apply.get(i).get("cell_3"));
	          searchVO.setResv_postno(apply.get(i).get("cell_4").replaceAll(",", ""));
	          searchVO.setResv_adrs1(apply.get(i).get("cell_5").replaceAll(",", ""));
	          searchVO.setResv_adrs2(apply.get(i).get("cell_6").replaceAll(",", ""));
	          searchVO.setResv_biz_tel(apply.get(i).get("cell_7"));
	          searchVO.setResv_name(apply.get(i).get("cell_8"));
	          searchVO.setResv_birth(apply.get(i).get("cell_9"));
	          searchVO.setResv_gender(apply.get(i).get("cell_10"));
	          searchVO.setResv_tel(apply.get(i).get("cell_11"));
	          searchVO.setResv_email(apply.get(i).get("cell_12"));
	          searchVO.setResv_depositor(apply.get(i).get("cell_13"));
	          searchVO.setResv_refund(apply.get(i).get("cell_14"));
	          searchVO.setResv_state(stateType.getMain_code());
	          
	          searchVO.setSite_code(loginService.getSiteCode());
	          searchVO.setCret_id(loginVO.getId());
	          searchVO.setCret_ip(request.getRemoteAddr());
	          searchVO.setResv_gubun("L");
	                                       
	          reserveService.insertReserveVO(searchVO);
	          
	      }
	      
	      resMap.put("res", "ok");
	      resMap.put("msg", "txt.success");
	      
	   
	  }catch(Exception e){
	      System.out.println(e.toString());
	      resMap.put("res", "error");
	      resMap.put("msg", "txt.fail");
	      }
	   
	   
	  redirectAttributes.addFlashAttribute("resMap", resMap);
	  return "redirect:/adms/reserve/applicant/list.do";
	  }
 

	
}
